/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface DButton {
        /**
          * 自定义类名
         */
        "customClass": string;
        /**
          * 自定义内联样式
         */
        "customStyle": { [key: string]: string };
        /**
          * 是否禁用
         */
        "disabled": boolean;
        /**
          * 是否为圆形按钮
         */
        "round": boolean;
        /**
          * 按钮尺寸
         */
        "size": "small" | "medium" | "large";
        /**
          * 按钮类型
         */
        "type": "primary" | "secondary" | "danger" | "text";
    }
    interface DDivider {
        /**
          * 分割线颜色
         */
        "color": string;
        /**
          * 分割线方向，可选值：horizontal、vertical
         */
        "direction": "horizontal" | "vertical";
        /**
          * 分割线样式，可选值：solid、dashed、dotted
         */
        "lineType": "solid" | "highDensityDashed" | "lowDensityDashed";
        /**
          * 分割线边距
         */
        "margin": string;
        /**
          * 分割线粗细
         */
        "size": string;
    }
    interface DIcon {
        /**
          * 图标颜色
         */
        "color": string;
        /**
          * 图标名称
         */
        "name": string;
        /**
          * 旋转角度（度数）
         */
        "rotate": number;
        /**
          * 图标大小
         */
        "size": string;
        /**
          * 是否启用旋转动画
         */
        "spin": boolean;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
}
export interface DIconCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDIconElement;
}
declare global {
    interface HTMLDButtonElement extends Components.DButton, HTMLStencilElement {
    }
    var HTMLDButtonElement: {
        prototype: HTMLDButtonElement;
        new (): HTMLDButtonElement;
    };
    interface HTMLDDividerElement extends Components.DDivider, HTMLStencilElement {
    }
    var HTMLDDividerElement: {
        prototype: HTMLDDividerElement;
        new (): HTMLDDividerElement;
    };
    interface HTMLDIconElementEventMap {
        "iconClick": MouseEvent;
    }
    interface HTMLDIconElement extends Components.DIcon, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDIconElementEventMap>(type: K, listener: (this: HTMLDIconElement, ev: DIconCustomEvent<HTMLDIconElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDIconElementEventMap>(type: K, listener: (this: HTMLDIconElement, ev: DIconCustomEvent<HTMLDIconElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDIconElement: {
        prototype: HTMLDIconElement;
        new (): HTMLDIconElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLElementTagNameMap {
        "d-button": HTMLDButtonElement;
        "d-divider": HTMLDDividerElement;
        "d-icon": HTMLDIconElement;
        "my-component": HTMLMyComponentElement;
    }
}
declare namespace LocalJSX {
    interface DButton {
        /**
          * 自定义类名
         */
        "customClass"?: string;
        /**
          * 自定义内联样式
         */
        "customStyle"?: { [key: string]: string };
        /**
          * 是否禁用
         */
        "disabled"?: boolean;
        /**
          * 是否为圆形按钮
         */
        "round"?: boolean;
        /**
          * 按钮尺寸
         */
        "size"?: "small" | "medium" | "large";
        /**
          * 按钮类型
         */
        "type"?: "primary" | "secondary" | "danger" | "text";
    }
    interface DDivider {
        /**
          * 分割线颜色
         */
        "color"?: string;
        /**
          * 分割线方向，可选值：horizontal、vertical
         */
        "direction"?: "horizontal" | "vertical";
        /**
          * 分割线样式，可选值：solid、dashed、dotted
         */
        "lineType"?: "solid" | "highDensityDashed" | "lowDensityDashed";
        /**
          * 分割线边距
         */
        "margin"?: string;
        /**
          * 分割线粗细
         */
        "size"?: string;
    }
    interface DIcon {
        /**
          * 图标颜色
         */
        "color"?: string;
        /**
          * 图标名称
         */
        "name"?: string;
        /**
          * 点击事件
         */
        "onIconClick"?: (event: DIconCustomEvent<MouseEvent>) => void;
        /**
          * 旋转角度（度数）
         */
        "rotate"?: number;
        /**
          * 图标大小
         */
        "size"?: string;
        /**
          * 是否启用旋转动画
         */
        "spin"?: boolean;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface IntrinsicElements {
        "d-button": DButton;
        "d-divider": DDivider;
        "d-icon": DIcon;
        "my-component": MyComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "d-button": LocalJSX.DButton & JSXBase.HTMLAttributes<HTMLDButtonElement>;
            "d-divider": LocalJSX.DDivider & JSXBase.HTMLAttributes<HTMLDDividerElement>;
            "d-icon": LocalJSX.DIcon & JSXBase.HTMLAttributes<HTMLDIconElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
        }
    }
}
